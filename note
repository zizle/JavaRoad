1. Java的内存划分
    (1)栈Stack：存放方法的局部变量，方法的运行一定要在栈当中运行。
    (2)堆Heap：凡是new出的，都在堆当中。
        堆内存的，都有一个十六进制的地址值。
        堆内存的数据都有默认值：
            整数： 0
            浮点数：0.0
            字符： \u0000
            布尔： false
            引用类型：null
    (3)方法区Method Area：存储.class相关信息，包含方法的信息
    (4)本地方法栈Native Method Stack：与操作系统相关
    (5)寄存器PC Register：与CPU相关


2. 接口小结
    在java 9+ 的版本中，接口的内容可以有
    (1)成员变量是常量
        [public] [static] [final] 数据类型 常量名称 = 数据值；
        注意：
            常量必须进行赋值，一旦赋值不可改变。
            常量名称全部用大写，用下划线分隔。

    (2)接口中最重要的就是抽象方法
        [public] [abstract] 返回值类型 方法名称(参数列表);
        注意：
            实现类必须覆盖重写所有的抽象方法，除非实现类是抽象类。

    (3)在java 8+ 接口中允许定义默认方法
        [public] default 返回值类型 方法名称(参数列表){ 方法体 }
        注意：
            默认方法也可以被覆盖重写

    (4)在java 8+ 接口中允许定义静态方法
        [public] static 返回值类型 方法名称(参数列表){ 方法体 }
        注意：
            应通过接口类名称进行调用，不能通过接口实现类对象进行调用。

    (5)在java 9+ 的版本中，接口允许定义私有方法
       普通私有方法：private 返回值类型 方法名称(参数列表){ 方法体 }
       静态私有方法：private static 返回值类型 方法名称(参数列表){ 方法体 }
       注意：
           私有方法只有接口自己才能使用，不能被实现类或者别人使用。
    (6)使用注意事项：
        接口中没有静态代码块或者构造方法；
        一个类的直接父类是唯一的，但是一个类可以实现多个接口；
        如果实现类所实现的多个接口中，存在重复的抽象方法，那么实现类仅需覆盖重写一次即可；
        如果实现类没有实现所有接口中的抽象方法，那么该实现类也要是一个抽象类；
        如果实现类所实现的多个接口中存在重复的默认方法，那么一定要对冲突的方法进行覆盖重写；
        一个类的直接父类当中的方法如果和接口中的方法产生冲突，那么优先使用父类方法。
